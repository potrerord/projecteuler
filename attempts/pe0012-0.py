"""
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be

1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1, 3
 6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4,  7, 14, 28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?

Attempt #1: left it running overnight and it got to like 32 factors,
    need to find a better faster way to do this
"""


from pe0003 import factors

TEST = 500


def main():
    """Call defined functions in the context of the problem."""

    print()
    try:
        print(trinum_with_over_x_factors(TEST))
    except KeyboardInterrupt:
        print("aahhhh don't worry it was a manual keyboard interrupt")
    print()


def trinum_with_over_x_factors(min: int) -> int:
    """Return a triangular number with over min factors."""

    # Initiate factor count.
    factor_count = 0

    # Initiate triangular numbers.
    trinum = 1
    i = 1
    highest_count = 0
    best_trinum = 0
    best_i = 1
    
    while True:
        # If new trinum has over min factors, return its value.
        factor_list = factors(trinum)
        factor_count = len(factor_list)

        if factor_count > highest_count:
            highest_count = factor_count
            best_trinum = trinum
            best_i = i
        print(f"{best_i}th {best_trinum} is highest factor count: {highest_count}/500 -- Current: {i}th {trinum} count: {factor_count} factor list: {factor_list}")
        if factor_count > min:
            return trinum
         
        # Increment to next triangular number.
        i += 1
        trinum += i
    

if __name__ == "__main__":
    main()
