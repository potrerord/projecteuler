"""
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be

1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1, 3
 6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4,  7, 14, 28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
________________________________________________________________________

Attempt #2

Notes:
  - # of divisors is product of incremented exponents of prime factors
    e.g. 2^3 x 3^2 x 5^1 -> 4 x 3 x 2 == 24 divisors
  - nth triangular number is n(n + 1)/2
  - something must have gone horribly wrong with my pe0003.py factors()
    lmao
________________________________________________________________________

Solution: 76576500, the 12375th triangular number, with 576 divisors.
Execution time: roughly 500ms
"""


from time import time
from typing import Dict, Tuple


def main():
    """Call defined functions in the context of the problem."""

    # User constant for testing.
    TEST = 500

    # Initialize timer.
    start = time()

    # Get answer.
    answer, index, count = trinum_with_min_divisors(TEST)

    # Print answer.
    print()
    print(f"The first triangular number with over {TEST} divisors is:")
    print(f"{answer}, the {index}th triangular number, with {count} divisors.")
    print()

    # End timer and report.
    end = time()
    runtime = end - start
    print(f"Execution time: {runtime * 1000:.2f}ms\n")


def divisor_count(num: int) -> int:
    """Return the number of divisors of an int."""

    # Initialize product.
    product = 1

    # Increment all exponents of prime factors by 1.
    for exponent in prime_factors(num).values():
        exponent += 1

        # Once incremented, multiply them into the product.
        product *= exponent

    return product


def prime_factors(num: int) -> Dict[int, int]:
    """Return a dictionary with prime factor keys and exponent
    values.

    Example: num=40 would return {2: 3, 5: 1}
    """

    # Create empty dictionary to store primes.
    primes = {}

    # Initialize possible factors at first prime number.
    possible_factor = 2

    while True:
        
        # Return prime list when there are no more factors.
        if num == 1:
            return primes
        
        # If the possible factor is a factor,
        if num % possible_factor == 0:            
            # Add it to the dictionary if needed, initialize exponent.
            if possible_factor not in primes:
                primes[possible_factor] = 0

            # Increment exponent.
            primes[possible_factor] += 1

            # Divide num by factor.
            num /= possible_factor
            
            # Reinitialize possible factor and loop.
            possible_factor = 2
            continue

        # If the possible factors are counting past the sqrt of num,
        elif possible_factor > num ** 0.5:
            # Num must be prime and should be added to the dictionary.
            primes[num] = 1

            # Job is done at this point.
            return primes

        # If possible_factor was not a factor, increment and loop.
        possible_factor += 1


def triangular_number(n: int) -> int:
    """Return the nth triangular number."""

    return n * (n + 1) / 2


def trinum_with_min_divisors(min: int) -> Tuple(int, int, int):
    """Return a triangular number with over min divisors, its index
    ("the nth triangular number", returning n), and its divisor count.
    """
    
    # Initialize triangular number count.
    n = 1

    while True:
        trinum = triangular_number(n)
        trinum_divisor_count = divisor_count(trinum)

        if trinum_divisor_count > min:
            return int(trinum), n, int(trinum_divisor_count)
        # Increment triangular number index.
        n += 1
    

if __name__ == "__main__":
    main()
