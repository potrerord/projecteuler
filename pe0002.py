"""
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.

Solution: 4613732
"""

def main():
    """Call defined functions in the context of the problem."""
    
    answer = even_fib_sum(4000001)

    print()
    print(answer)
    print()


def even_fib_sum(upper_bound: int) -> int:
    """Find the sum of all even Fibonnaci sequence numbers up to upper
    bound (not inclusive).
    """
    
    # Initialize Fibonacci sequence.
    prev_num = 1
    num = 2

    # Initialize sum.
    even_sum = 0

    # Iterate until upper_bound (not inclusive).
    while num < upper_bound:
        
        # If num is even, add it to the sum.
        if num % 2 == 0:
            even_sum += num
        
        # Advance num to the next Fibonacci number using prev_num.
        num = prev_num + num

        # Update value of prev_num to match num's old value.
        prev_num = num - prev_num

    return even_sum

if __name__ == "__main__":
    main()
